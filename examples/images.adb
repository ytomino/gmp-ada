with GMP.Z;
with GMP.Q;
with GMP.F;
with GMP.FR;
with GMP.C;
with Ada.Text_IO;
procedure Images is
	use Ada.Text_IO;
	package Default_F is new GMP.F;
	package Default_FR is new GMP.FR;
	package Default_C is new GMP.C (Default_FR, Default_FR);
	use GMP.Z;
	use GMP.Q;
	use Default_F;
	use Default_FR;
	use Default_C;
	Z : MP_Integer;
	Q : MP_Rational;
	F : Default_F.MP_Float;
	FR : Default_FR.MP_Float;
	C : MP_Complex;
begin
	pragma Assert (Image (Z) = "0");
	pragma Assert (Image (Q) = "0");
	pragma Assert (Image (F) = "0");
	pragma Assert (Image (FR) = "NAN");
	pragma Assert (Image (C) = "(@NaN@ @NaN@)");
	Z := To_MP_Integer (99);
	Q := 5 / 7;
	F := To_MP_Float (5.0 / 7.0);
	FR := To_MP_Float (5.0 / 7.0);
	-- C := 1.0 - 2.0 * i; -- [gcc-4.7] compiler's bug
	C := Compose (To_MP_Float (1.0), To_MP_Float (-2.0));
	pragma Assert (Image (Z) = "99");
	pragma Assert (Image (Q) = "5/7");
	pragma Assert (Image (F) = "0.714285714285714301575");
	pragma Assert (Image (FR) = "0.71428571428571430");
	pragma Assert (Image (C) = "(1.0000000000000000 -2.0000000000000000)");
	Z := Value ("-2");
	Q := Value ("-3/4");
	F := Value ("-1e3");
	FR := Value ("-1e3");
	C := Value ("-1e3");
	pragma Assert (Image (Z) = "-2");
	pragma Assert (Image (Q) = "-3/4");
	pragma Assert (Image (F) = "-1000");
	pragma Assert (Image (FR) = "-1000.0000000000000");
	pragma Assert (Image (C) = "(-1.0000000000000000e+3 +0)");
	F := Value ("+1e3");
	FR := Value ("+1e3");
	C := Value ("(1.2 1.4)");
	pragma Assert (Image (F) = "1000");
	pragma Assert (Image (FR) = "1000.0000000000000");
	pragma Assert (Image (NaN) = "NAN");
	pragma Assert (Image (Infinity) = "INF");
	pragma Assert (Image (-Infinity) = "-INF");
	pragma Assert (Image (C) = "(1.2000000000000000 1.3999999999999999)");
	pragma Debug (Put_Line ("ok"));
end Images;
